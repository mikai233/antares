---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by dream.
--- DateTime: 2022/12/21 21:11
---

--- @type LuaProtoc
LuaProtoc = LuaProtoc

local proto_path = "../proto/src/main/proto"

local protos = LuaProtoc.list_protos({ proto_path })
local protoc = LuaProtoc.parse_files(protos, { proto_path })
protoc:gen_lua("lua/proto") -- 生成lua提示文件

local dir = "lua/proto"

for _, file in pairs(IOHelper.list_files(dir)) do
    local proto_module = string.gsub(string.sub(file, 1, #file - 4), "//", "/")
    if proto_module ~= dir .. "/proto" then
        require(proto_module)
    end
end

---@param name string
function message_of(name)
    return "com.mikai233.protocol." .. name
end

MSG_CS = {
    id_name = {},
    name_id = {}
}

MSG_SC = {
    id_name = {},
    name_id = {}
}

local cs_descriptor = protoc:message_descriptor_by_name(message_of("MessageClientToServer"))
for _, field in ipairs(cs_descriptor:fields()) do
    local singular = field:runtime_field_type():get_singular()
    local name = singular:get_message():name()
    local number = field:number()
    local id_name = MSG_CS.id_name
    local name_id = MSG_CS.name_id
    id_name[number] = name
    name_id[name] = number
end

local sc_descriptor = protoc:message_descriptor_by_name(message_of("MessageServerToClient"))
for _, field in ipairs(sc_descriptor:fields()) do
    local singular = field:runtime_field_type():get_singular()
    local name = singular:get_message():name()
    local number = field:number()
    local id_name = MSG_SC.id_name
    local name_id = MSG_SC.name_id
    id_name[number] = name
    name_id[name] = number
end

---@param id number
---@param bytes number[]
function decode_resp(id, bytes)
    local name = MSG_SC.id_name[id]
    if name == nil then
        warn("proto id:{} associated msg type not found", id)
        return nil, nil
    else
        return name, protoc:decode(message_of(name), bytes)
    end
end

---@param name string
---@param message table
function encode_req(name, message)
    local id = MSG_CS.name_id[name]
    if id == nil then
        warn("proto name:{} associated id not found", name)
        return nil, nil
    else
        return id, protoc:encode(message_of(name), message)
    end
end